# Copyright 2019 Verily Life Sciences LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""A helper module to work with metadata associated with the dataset.

The metadata is a JSON file containing a single dictionary with key/value
pairs.

The module contains both helper functions to work with the metadata and
constants for fields that are expected to be included.
"""
import json
import logging
import os.path

import tensorflow as tf
gfile = tf.gfile

# Constants for fields contained in the metadata for the dataset.
MIN_WIDTH = 'min_width'  # The min width of an image in the dataset.
MIN_HEIGHT = 'min_height'  # The max height of an image in the dataset.
MAX_WIDTH = 'max_width'  # The max width of an image in the dataset.
MAX_HEIGHT = 'max_height'  # The max height of an image in the dataset.
NUM_EXAMPLES_POS = 'num_examples_positive'  # Number of positive examples.
NUM_EXAMPLES_NEG = 'num_examples_negative'  # Number of negative examples.
NUM_EXAMPLES_TRAIN = 'num_examples_train'  # Number of negative examples.
NUM_EXAMPLES_TEST = 'num_examples_test'  # Number of negative examples.
NUM_EXAMPLES_IGNORED = 'num_examples_ignored'  # Number of negative examples.


def metadata_path(data_dir=None, model_dir=None):
  """Returns path to serialized metadata under either data_dir or model_dir.

  This metadata file is generated by mr_tfexamples and records information about
  the table's contents and construction.

  Args:
    data_dir: Directory with training, testing data. Takes precedence over
              model_dir.
    model_dir: Model training directory.

  Returns:
    String path to file with serialized metadata.

  Raises:
    ValueError: If neither data_dir or model_dir are set.
  """
  if data_dir and not model_dir:
    return os.path.join(data_dir, 'metadata.json')
  if model_dir and not data_dir:
    return os.path.join(model_dir, 'input_metadata.json')

  raise ValueError('One of data_dir or model_dir must be set')


def shape_from_metadata(metadata):
  """Returns the shape of the largest images in the dataset.

  Args:
    metadata: The metadata dictionary

  Returns:
    A (height, width) shape tuple.
  """
  max_shape = (metadata[MAX_HEIGHT], metadata[MAX_WIDTH])
  return max_shape


def load_metadata(data_dir=None, model_dir=None):
  """Loads metadata structure from file.

  Args:
    data_dir: Directory with training, testing data.
    model_dir: Model training directory.

  Returns:
    A dictionary of the metadata for the dataset.
  """
  path = metadata_path(data_dir=data_dir, model_dir=model_dir)
  logging.info('Loading metadata from path: %s', path)
  with gfile.Open(path) as fl:
    return json.load(fl)
